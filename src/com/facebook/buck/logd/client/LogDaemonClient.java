/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.facebook.buck.logd.client;

import com.facebook.buck.logd.LogDaemonException;
import com.facebook.buck.logd.proto.LogType;
import io.grpc.ManagedChannel;

/** Interface for LogD Client. */
public interface LogDaemonClient {

  /**
   * Returns client grpc channel
   *
   * @return client grpc channel
   */
  ManagedChannel getChannel();

  /**
   * Returns port to which channel is connected
   *
   * @return port to which channel is connected
   */
  int getPort();

  /**
   * Client calls this method to request LogD to create a corresponding log directory in file-system
   * and/or storage.
   *
   * @throws LogDaemonException if fails to create log dir
   */
  void createLogDir() throws LogDaemonException;

  /**
   * Client calls this method to request LogD to create a log file in file-system and/or storage.
   *
   * @return a file identifier {@code logFileId} corresponding to the created file by LogD server
   */
  int createLogFile(String logFilePath, LogType logType) throws LogDaemonException;

  /**
   * Client calls this method to acquire a StreamObserver object which listens for incoming logs.
   * The returned StreamObserver is wrapped in a LogdStream which streams log messages to locations
   * identified by {@code logFileId}
   *
   * @param logFileId log file identifier generated by LogD server
   * @return a LogdStream which streams logs from client
   */
  LogdStream openLog(int logFileId) throws LogDaemonException;

  /** Close all existing channels to logD server */
  void shutdown();

  /** Client closes all existing streams and sends a request to LogD signaling a server shutdown. */
  void requestLogdServerShutdown();
}
