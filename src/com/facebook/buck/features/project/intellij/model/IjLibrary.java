/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.facebook.buck.features.project.intellij.model;

import com.facebook.buck.core.model.BuildTarget;
import com.facebook.buck.core.util.immutables.BuckStylePrehashedValue;
import com.facebook.buck.features.project.intellij.IjDependencyListBuilder;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.common.collect.Ordering;
import java.nio.file.Path;
import java.util.function.Function;
import javax.annotation.Nullable;
import org.immutables.value.Value;

/** Represents a prebuilt library (.jar or .aar) as seen by IntelliJ. */
@BuckStylePrehashedValue
public abstract class IjLibrary implements IjProjectElement {
  /**
   * Types of IjLibrary
   * <li>{@link #DEFAULT}: Generated by a Buck target
   * <li>{@link #KOTLIN_JAVA_RUNTIME}: Generated for Kotlin code support in IDE
   */
  public enum Type {
    DEFAULT,
    KOTLIN_JAVA_RUNTIME
  }

  public enum Level {
    PROJECT,
    MODULE
  }

  /**
   * This is a unique identifier for the library within its level, derived from the buck build
   * target name that this library corresponds to.
   */
  @Override
  public abstract String getName();

  @Override
  @Value.Auxiliary
  public abstract ImmutableSet<BuildTarget> getTargets();

  /** @return path to the jars for external annotations. */
  @Value.NaturalOrder
  @Value.Auxiliary
  public abstract ImmutableSortedSet<Path> getAnnotationJars();

  /** @return path to the binary (.jar or .aar) the library represents. */
  @Value.NaturalOrder
  @Value.Auxiliary
  public abstract ImmutableSortedSet<Path> getBinaryJars();

  /** @return classPath paths */
  @Value.NaturalOrder
  @Value.Auxiliary
  public abstract ImmutableSortedSet<Path> getClassPaths();

  /** @return path to the jar containing sources for the library. */
  @Value.NaturalOrder
  @Value.Auxiliary
  public abstract ImmutableSortedSet<Path> getSourceJars();

  /** @return url to the javadoc. */
  @Value.NaturalOrder
  @Value.Auxiliary
  public abstract ImmutableSortedSet<String> getJavadocUrls();

  /** @return path to the directories containing Java sources for the library. */
  @Value.NaturalOrder
  @Value.Auxiliary
  public abstract ImmutableSortedSet<Path> getSourceDirs();

  @Value.Check
  protected void eitherBinaryJarOrClassPathPresentForDefaultLibrary() {
    if (getType() == Type.DEFAULT) {
      // IntelliJ library should have a binary jar or classpath, but we also allow it to have an
      // optional res folder so that resources can be loaded properly.
      boolean hasClasspathsWithoutRes =
          getClassPaths().stream().anyMatch(input -> !input.endsWith("res"));

      Preconditions.checkArgument(!getBinaryJars().isEmpty() ^ hasClasspathsWithoutRes);
    }
  }

  @Value.Check
  protected void emptyBodyForKotlinJavaRuntime() {
    if (getType() == Type.KOTLIN_JAVA_RUNTIME) {
      // KotlinJavaRuntime is not generated from a target and it depends on an external template
      // file so all those properties should be empty
      Preconditions.checkArgument(getTargets().isEmpty());
      Preconditions.checkArgument(getLevel() == Level.PROJECT);
      Preconditions.checkArgument(getBinaryJars().isEmpty());
      Preconditions.checkArgument(getClassPaths().isEmpty());
      Preconditions.checkArgument(getSourceJars().isEmpty());
      Preconditions.checkArgument(getJavadocUrls().isEmpty());
      Preconditions.checkArgument(getSourceJars().isEmpty());
    }
  }

  @Override
  public void addAsDependency(
      DependencyType dependencyType, IjDependencyListBuilder dependencyListBuilder) {
    if (dependencyType.equals(DependencyType.COMPILED_SHADOW)) {
      dependencyListBuilder.addCompiledShadow(getName());
    } else {
      IjDependencyListBuilder.Scope scope = IjDependencyListBuilder.Scope.COMPILE;
      if (dependencyType.equals(DependencyType.TEST)) {
        scope = IjDependencyListBuilder.Scope.TEST;
      } else if (dependencyType.equals(DependencyType.RUNTIME)) {
        scope = IjDependencyListBuilder.Scope.RUNTIME;
      }
      if (getLevel() == Level.PROJECT) {
        dependencyListBuilder.addLibrary(getName(), scope, false /* exported */);
      } else {
        dependencyListBuilder.addModuleLibrary(getName(), scope, false /* exported */, this);
      }
    }
  }

  @Value.Auxiliary
  public abstract Type getType();

  public abstract Level getLevel();

  public IjLibrary copyWithLevel(Level level) {
    return builder().from(this).setLevel(level).build();
  }

  public IjLibrary copyWithTransformer(
      @Nullable Function<Path, Path> pathTransformer,
      @Nullable Function<String, String> stringTransformer) {
    return builder()
        .from(this)
        .setAnnotationJars(transform(getAnnotationJars(), pathTransformer))
        .setBinaryJars(transform(getBinaryJars(), pathTransformer))
        .setClassPaths(transform(getClassPaths(), pathTransformer))
        .setSourceJars(transform(getSourceJars(), pathTransformer))
        .setSourceDirs(transform(getSourceDirs(), pathTransformer))
        .setJavadocUrls(transform(getJavadocUrls(), stringTransformer))
        .build();
  }

  private static <T extends Comparable<T>> ImmutableSortedSet<T> transform(
      ImmutableSortedSet<T> set, @Nullable Function<T, T> transformer) {
    if (transformer != null) {
      return set.stream()
          .map(transformer)
          .collect(ImmutableSortedSet.toImmutableSortedSet(Ordering.natural()));
    }
    return set;
  }

  static Builder builder() {
    return new Builder();
  }

  public static class Builder extends ImmutableIjLibrary.Builder {}
}
