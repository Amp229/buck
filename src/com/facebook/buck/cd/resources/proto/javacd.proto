/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//----------------------------------------------
//  Generate command
//----------------------------------------------
//
// third-party/java/protobuf/gen.sh
//
//-----------------------

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.facebook.buck.cd.model.java";
option java_outer_classname = "JavaCDProto";

// best practices to include version number in package
package javacd.api.v1;

import "cd/resources/proto/common.proto";

// Base parameters used by all commands (abi or library jars, as well as pipelining command)
message BaseCommandParams{
    SpoolMode spoolMode = 1;
    bool hasAnnotationProcessing = 2;
    bool withDownwardApi = 3;

    /** The method in which the compiler output is spooled. */
    enum SpoolMode {
        UNKNOWN = 0;

        /**
         * Writes the compiler output directly to a .jar file while retaining the intermediate .class
         * files in memory.
         */
        DIRECT_TO_JAR = 1;

        /**
         * Writes the intermediate .class files from the compiler output to disk which is later packed
         * up into a .jar file.
         */
        INTERMEDIATE_TO_DISK = 2;
    }
}

// Represents a single rule command either library or abi jar
message BuildJavaCommand {
    BaseCommandParams baseCommandParams = 1;
    // abi or library
    oneof command {
        LibraryJarCommand libraryJarCommand = 2;
        AbiJarCommand abiJarCommand = 3;
    }
}

// Common parameters for build jar commands (abi and library jar ones)
message BaseJarCommand {
    AbiGenerationMode abiCompatibilityMode = 1;
    AbiGenerationMode abiGenerationMode = 2;
    bool isRequiredForSourceOnlyAbi = 3;
    bool trackClassUsage = 4;
    bool trackJavacPhaseEvents = 5;
    FilesystemParams filesystemParams = 6;
    BuildTargetValue buildTargetValue = 7;
    OutputPathsValue outputPathsValue = 8;
    repeated RelPath compileTimeClasspathPaths = 9;
    repeated RelPath javaSrcs = 10;
    repeated JavaAbiInfo fullJarInfos = 11;
    repeated JavaAbiInfo abiJarInfos = 12;
    repeated RelPathMapEntry resourcesMap = 13;
    map<string, RelPath> cellToPathMappings = 14;
    JarParameters libraryJarParameters = 15;
    AbsPath buildCellRootPath = 16;
    ResolvedJavac resolvedJavac = 17;
    ResolvedJavacOptions resolvedJavacOptions = 18;
}

enum AbiGenerationMode {
    UNKNOWN = 0;
    /** Generate ABIs by stripping .class files */
    CLASS = 1;
    /** Generate ABIs by parsing .java files with dependency ABIs available */
    SOURCE = 2;
    /**
     * Output warnings for things that aren't legal when generating ABIs from source without
     * dependency ABIs
     */
    MIGRATING_TO_SOURCE_ONLY = 3;
    /**
     * Generate ABIs by parsing .java files without dependency ABIs available (has some limitations)
     */
    SOURCE_ONLY = 4;
}

// Represents base parameter for library commands (both library jar and pipelining library jar)
message LibraryJarBaseCommand{
    RelPath pathToClasses = 3;
    RelPath rootOutput = 4;
    RelPath pathToClassHashes = 5;
    RelPath annotationsPath = 6;
    UnusedDependenciesParams unusedDependenciesParams = 7;
}

// library jar command
message LibraryJarCommand {
    BaseJarCommand baseJarCommand = 1;
    LibraryJarBaseCommand libraryJarBaseCommand = 2;
}

// abi jar command
message AbiJarCommand {
    BaseJarCommand baseJarCommand = 1;
    JarParameters abiJarParameters = 2;
}

// Represents pipelining command
// Consist from
// 1. Base parameters,
// 2. Pipelining state
// 3. One of these :
//      * abi command
//      * library command
//      * or both abi and library commands
message PipeliningCommand {
    BaseCommandParams baseCommandParams = 1;
    PipelineState pipeliningState = 2;
    BasePipeliningCommand abiCommand = 3;
    LibraryPipeliningCommand libraryCommand = 4;
}

// Represents base parameters for pipelining command (used by abi and library pipelining commands)
message BasePipeliningCommand{
    BuildTargetValue buildTargetValue = 1;
    FilesystemParams filesystemParams = 2;
    OutputPathsValue outputPathsValue = 3;
    repeated RelPathMapEntry resourcesMap = 4;
    map<string, RelPath> cellToPathMappings = 5;
}

// Represents library pipelining command
message LibraryPipeliningCommand{
    BasePipeliningCommand basePipeliningCommand = 1;
    LibraryJarBaseCommand libraryJarBaseCommand = 2;
}

// Represents pipelining state
message PipelineState {
    BuildTargetValue buildTargetValue = 1;
    repeated RelPath compileTimeClasspathPaths = 2;
    repeated RelPath javaSrcs = 3;
    repeated JavaAbiInfo fullJarInfos = 4;
    repeated JavaAbiInfo abiJarInfos = 5;
    bool trackClassUsage = 6;
    bool trackJavacPhaseEvents = 7;
    AbiGenerationMode abiCompatibilityMode = 8;
    AbiGenerationMode abiGenerationMode = 9;
    bool isRequiredForSourceOnlyAbi = 10;
    OutputPathsValue.OutputPaths outputPaths = 11;
    JarParameters abiJarParameters = 12;
    JarParameters libraryJarParameters = 13;
    bool withDownwardApi = 14;
    ResolvedJavac resolvedJavac = 15;
    ResolvedJavacOptions resolvedJavacOptions = 16;
}

message FilesystemParams {
    AbsPath rootPath = 1;
    RelPath configuredBuckOut = 2;
    repeated string globIgnorePaths = 3;
}

message BuildTargetValue {
    string fullyQualifiedName = 1;
    Type type = 2;
    enum Type {
        UNKNOWN = 0;
        LIBRARY = 1;
        SOURCE_ABI = 2;
        SOURCE_ONLY_ABI = 3;
    }
}

message OutputPathsValue {
    OutputPaths libraryPaths = 1;
    OutputPaths sourceAbiPaths = 2;
    OutputPaths sourceOnlyAbiPaths = 3;
    string libraryTargetFullyQualifiedName = 4;

    message OutputPaths {
        RelPath classesDir = 1;
        RelPath outputJarDirPath = 2;
        RelPath abiJarPath = 3;
        RelPath annotationPath = 4;
        RelPath pathToSourcesList = 5;
        RelPath workingDirectory = 6;
        RelPath outputJarPath = 7;
    }
}

message JavaAbiInfo {
    string buildTargetName = 1;
    repeated Path contentPaths = 2;
}

message ResolvedJavacOptions {
    string bootclasspath = 1;
    repeated RelPath bootclasspathList = 2;
    JavacLanguageLevelOptions languageLevelOptions = 3;
    bool debug = 4;
    bool verbose = 5;
    JavacPluginParams javaAnnotationProcessorParams = 6;
    JavacPluginParams standardJavacPluginParams = 7;
    repeated string extraArguments = 8;
    repeated JavacPluginJsr199Fields annotationProcessors = 9;
    repeated JavacPluginJsr199Fields javaPlugins = 10;
    bool javaAnnotationProcessorParamsPresent = 11;

    message JavacLanguageLevelOptions {
        string sourceLevel = 1;
        string targetLevel = 2;
    }

    message JavacPluginJsr199Fields {
        bool canReuseClassLoader = 1;
        repeated string processorNames = 2;
        repeated URL classpath = 3;

        message URL {
            string value = 1;
        }
    }

    message JavacPluginParams {
        repeated string parameters = 1;
        repeated ResolvedJavacPluginProperties pluginProperties = 2;
    }

    message ResolvedJavacPluginProperties {
        bool canReuseClassLoader = 1;
        bool doesNotAffectAbi = 2;
        bool supportsAbiGenerationFromSource = 3;
        repeated string processorNames = 4;
        repeated RelPath classpath = 5;
        map<string, RelPath> pathParams = 6;
    }
}

message JarParameters {
    bool hashEntries = 1;
    bool mergeManifests = 2;
    RelPath jarPath = 3;
    RemoveClassesPatternsMatcher removeEntryPredicate = 4;
    repeated RelPath entriesToJar = 5;
    repeated RelPath overrideEntriesToJar = 6;
    string mainClass = 7;
    RelPath manifestFile = 8;
    LogLevel duplicatesLogLevel = 9;

    enum LogLevel {
        UNKNOWN = 0;
        OFF = 1;
        SEVERE = 2;
        WARNING = 3;
        INFO = 4;
        CONFIG = 5;
        FINE = 6;
        FINER = 7;
        FINEST = 8;
        ALL = 9;
    }

    message RemoveClassesPatternsMatcher {
        repeated string patterns = 1;
    }
}

message ResolvedJavac {
    oneof javac {
        ExternalJavac externalJavac = 1;
        JSR199Javac jsr199Javac = 2;
    }

    message ExternalJavac {
        string shortName = 1;
        repeated string commandPrefix = 2;
    }

    message JSR199Javac {
    }
}

message UnusedDependenciesParams {
    repeated DependencyAndExportedDepsPath deps = 1;
    repeated DependencyAndExportedDepsPath providedDeps = 2;
    repeated RelPath depFile = 3;
    UnusedDependenciesAction unusedDependenciesAction = 4;
    repeated string exportedDeps = 5;
    string buildozerPath = 6;
    bool onlyPrintCommands = 7;
    bool doUltralightChecking = 8;

    /** An action that is executed when a rule that compiles Java code has unused dependencies. */
    enum UnusedDependenciesAction {
        UNKNOWN = 0;
        FAIL = 1;
        WARN = 2;
        IGNORE = 3;
    }

    message DependencyAndExportedDepsPath {
        BuildTargetAndPaths dependency = 1;
        repeated DependencyAndExportedDepsPath exportedDeps = 2;
    }

    message BuildTargetAndPaths {
        string buildTargetName = 1;
        RelPath fullJarPath = 2;
        RelPath abiPath = 3;
    }
}
