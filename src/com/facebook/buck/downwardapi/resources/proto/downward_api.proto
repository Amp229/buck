/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//----------------------------------------------
//  Generate command
//----------------------------------------------
//
// When modifying this file, please run the following generate command,
// and include generated code in your commit
//
// third-party/java/protobuf/gen.sh
//
//-----------------------

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.facebook.buck.downward.model";
option java_outer_classname = "DownwardAPIProto";

// best practices to include version number in package
package downward.api.v1;

import "google/protobuf/duration.proto";

message EventTypeMessage {
    EventType event_type = 1;

    enum EventType {
        UNKNOWN = 0;
        CONSOLE_EVENT = 1;
        LOG_EVENT = 2;
        CHROME_TRACE_EVENT = 3;
        STEP_EVENT = 4;
        EXTERNAL_EVENT = 5;
        RESULT_EVENT = 6;
        PIPELINE_FINISHED_EVENT = 7;
        END_EVENT = 100;
    }
}

enum LogLevel {
    UNKNOWN = 0;
    FATAL = 1;
    ERROR = 2;
    WARN = 3;
    INFO = 4;
    DEBUG = 5;
    TRACE = 6;
}

message ConsoleEvent {
    LogLevel log_level = 1;
    string message = 2;
}

message LogEvent {
    LogLevel log_level = 1;
    string message = 2;
    string logger_name = 3;
}

message StepEvent {
    // required for matching start to finish events for downward API. Does not map to a field in
    // buck's StepEvent
    int32 event_id = 1;
    StepStatus step_status = 2;
    string step_type = 3;
    string description = 4;
    // relative time duration from the beginning of the tool invocation
    google.protobuf.Duration duration = 5;
    string action_id = 6;

    enum StepStatus {
        UNKNOWN = 0;
        STARTED = 1;
        FINISHED = 2;
    }
}

// Maps to SimplePerfEvent in buck.
message ChromeTraceEvent {
    // required for matching begin to end events for downward API. Does not map to a field in
    // SimplePerfEvent
    int32 event_id = 1;
    string category = 2;
    ChromeTraceEventStatus status = 3;
    // just included into chrome trace
    map<string, string> data = 4;
    // relative time duration from the beginning of the tool invocation
    google.protobuf.Duration duration = 5;
    string title = 6;
    string action_id = 7;

    enum ChromeTraceEventStatus {
        UNKNOWN = 0;
        BEGIN = 1;
        END = 2;
    }
}

// Empty event to indicate end of downward APi protocol
message EndEvent {
}

// An ExternalEvent is an event that is intended to be propagated to consumers outside of Buck (currently via the Websocket).
// Tools are able to create this event so that arbitrary data can be propagated to any custom listener of the Websocket.
// Buck itself does not process these events in any way, and is unaware of its data.
message ExternalEvent {
    map<string, string> data = 1;
}

// Event used to notify buck that execution task has been completed.
message ResultEvent {
    string action_id = 1;
    int32 exit_code = 2;
    string message = 3;
}

// Event used to notify buck that pipelining task has been finished.
message PipelineFinishedEvent {
    repeated string action_id = 1;
}
