/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{namespace genrule}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'genrule()' /}
    {param navid: 'rule_genrule' /}
    {param prettify: true /}
    {param description}
      A rule that is used to generate files from a shell command. It must
      produce a single output file or folder.
    {/param}
    {param content}

{call buck.rule}
{param status: 'FROZEN' /}
{param overview}
  A <code>genrule()</code> is used to generate files from a shell
  command. It must produce a single output file or folder.
{/param}

{param args}

{call buck.name_arg /}

{call genrule_common.srcs_arg /}

{call genrule_common.cmd_arg /}

{call genrule_common.bash_arg /}

{call genrule_common.cmd_exe_arg /}

{call genrule_common.type_arg /}

{call buck.arg}
  {param name: 'out' /}
  {{param default : 'None' /}}
  {param desc}
     The name of the output file or directory. The complete path to this
     argument is provided to the shell command through
     the <code>OUT</code> environment variable. Only one of<code>out</code>
     or <code>outs</code> may be present.
  {/param}
{/call}

{call buck.arg}
  {param name: 'outs' /}
  {{param default : '{}' /}}
  {param desc}
  <p>
  Mapping defining <a href="{ROOT}concept/named_outputs.html">named outputs</a>
  &nbsp;to output paths relative to the rule's output directory. Only one of
  &nbsp;<code>out</code> or <code>outs</code> may be present.
  </p>

  <p>
  Example:
  </p>

{literal}<pre class="prettyprint lang-py">
genrule(
  name = "named_outputs",
  outs = {
    "output1": [
      "out1.txt",
    ],
    "output2": [
      "out2.txt",
    ],
  },
  default_outs = [ "out1.txt" ],
  cmd = "echo something> $OUT/out1.txt && echo another> $OUT/out2.txt",
)
</pre>{/literal}

  <p>
      Note that a maximum of one value may be present in the list in this map. For example:

{literal}<pre class="prettyprint lang-py">
outs = {
  "output1": [
    "out1.txt",
  ],
},
</pre>{/literal}

      is valid, whereas

{literal}<pre class="prettyprint lang-py">
outs = {
  "output1": [
    "out1.txt",
    "out2.txt",
  ],
},
</pre>{/literal}

      is not.
  </p>


  {/param}
{/call}

{call buck.arg}
  {param name: 'default_outs' /}
  {param default : '[]' /}
  {param desc}
  <p>
  Default output which must be present if the <code>outs</code> arg is present. Otherwise does not apply.
  </p>
  <p>
  If a rule with <code>outs</code> is consumed without an output label, the default output is returned. The
  default output does not need to be present in any of the named outputs defined in <code>outs</code>.
  </p>
  <p>
      Note that a maximum of one value may be present in this list. For example:

      {literal}<pre class="prettyprint lang-py">default_outs = [ "output_one", ]</pre>{/literal}

      is valid, whereas

      {literal}<pre class="prettyprint lang-py">default_outs = [ "output_one", "output_two", ]</pre>{/literal}

      is not.
  </p>
  {/param}
{/call}

{call genrule_common.environment_expansion_separator /}

{call buck.arg}
  {param name: 'enable_sandbox' /}
  {param default : 'False' /}
  {param desc}
  Whether this target should be executed in a sandbox or not.
  {/param}
{/call}

{call buck.arg}
  {param name: 'executable' /}
  {param default : 'False' /}
  {param desc}
  Whether the output of the genrule is itself executable. Marking an output as
  executable makes <code>buck run</code> and <code>$(exe ...)</code> macro
  expansion work with this target.
  {/param}
{/call}

{call buck.arg}
  {param name: 'remote' /}
  {param default : 'False' /}
  {param desc}
  Opts this genrule in to remote execution. Note that it is only safe to
  execute a genrule remotely if it is completely hermetic and completely
  and correctly describes its dependencies. Defaults to false. This parameter
  is unstable. It is subject to removal, default reversal, and other arbitrary
  changes in the future.
  {/param}
{/call}

{call buck.tests_arg /}

{/param} // args

{param examples}

This genrule() uses a Python script to derive a new
{sp}<code>AndroidManifest.xml</code> from an
{sp}<code>AndroidManifest.xml</code> in the source tree. 
Note you don't need to prepend execution commands with 
{sp}<code>python</code>: Buck knows how to execute different 
kinds of binaries using <code>$(exe)</code> command.

{literal}<pre class="prettyprint lang-py">
genrule(
  name = 'generate_manifest',
  srcs = [
    'AndroidManifest.xml',
  ],
  bash = '$(exe //python/android:basic_to_full) ' \
      '$SRCDIR/AndroidManifest.xml > $OUT',
  cmd_exe = '$(exe //python/android:basic_to_full) ' \
      '%SRCDIR%\\AndroidManifest.xml > %OUT%',
  out = 'AndroidManifest.xml',
)
</pre>{/literal}

{literal}<pre class="prettyprint lang-py">
genrule(
  name = 'generate_manifest_with_named_outputs',
  srcs = [
    'AndroidManifest.xml',
  ],
  bash = '$(exe //python/android:basic_to_full) ' \
      '$SRCDIR/AndroidManifest.xml > $OUT/AndroidManifest.xml',
  cmd_exe = '$(exe //python/android:basic_to_full) ' \
      '%SRCDIR%\\AndroidManifest.xml > %OUT%\\AndroidManifest.xml',
  outs =  {
    "manifest": [ "AndroidManifest.xml" ],
  },
  default_outs = [ "AndroidManifest.xml" ],
)
</pre>{/literal}

<p>
For named outputs, build with any of the following:
</p>

{literal}<pre class="prettyprint lang-py">
  buck build //:generate_manifest_with_named_outputs
</pre>{/literal}

{literal}<pre class="prettyprint lang-py">
  buck build //:generate_manifest_with_named_outputs[manifest]
</pre>{/literal}

<p>
Consume in <code>srcs</code> with:
</p>

{literal}<pre class="prettyprint lang-py">
export_file(
    name = "magic1",
    src = ":generate_manifest_with_named_outputs",
    out = "some_dir_to_copy_to/AndroidManifest.xml",
)
</pre>{/literal}

{literal}<pre class="prettyprint lang-py">
export_file(
    name = "magic2",
    src = ":generate_manifest_with_named_outputs[manifest]",
    out = "some_dir_to_copy_to/AndroidManifest.xml",
)
</pre>{/literal}

<p>
Note that <code>magic1</code> consumes <code>generate_manifest_with_named_outputs</code>'s default
output. <code>magic2</code> consumes <code>generate_manifest_with_named_outputs</code>'s named
output "manifest," which happen to be pointing to the same output as the default output in this
case, but they do not have to point to the same output.

{/param} // examples

{/call} // buck.rule

 {/param}
  {/call}
{/template}
