#!/bin/bash

KERNEL=$(uname -s 2>/dev/null)

# Resolve symlinks if necessary, otherwise madness will follow.
# On a GNU system, we could use "-f" to follow all symlinks. BSD based
# systems don't have this flag. *sigh*
# http://stackoverflow.com/a/246128
# https://gist.github.com/tvlooy/cbfbdb111a4ebad8b93e
function abs_script_dir_path {
    SOURCE=${BASH_SOURCE[0]}
    while [ -h "$SOURCE" ]; do
      DIR=$( cd -P $( dirname "$SOURCE") && pwd )
      SOURCE=$(readlink "$SOURCE")
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
    done
    DIR=$( cd -P $( dirname "$SOURCE" ) && pwd )
    echo $DIR
}

# Translate to native paths on CygWin
function translate_path {
  [[ $KERNEL != CYGWIN_NT* ]] && echo "$1" && return
  cygpath -w "$1"
}

BUCK_BIN_DIR=$(abs_script_dir_path "$0")
NAILGUN_DIR=$(translate_path "$BUCK_BIN_DIR/../third-party/nailgun")
BUCK_DIR=$(translate_path "$BUCK_BIN_DIR/..")
BUCK_PY_PATH=$(translate_path "$BUCK_BIN_DIR/../programs/buck.py")
if [[ $KERNEL == CYGWIN_NT* ]]; then
  PY_PATH_SEPARATOR=";"
else
  PY_PATH_SEPARATOR=":"
fi

PYTHON=$(command -v "$BUCK_PYTHON" python3.9 python3 python2.7 python2 python | head -1)
PYTHONPATH="$NAILGUN_DIR$PY_PATH_SEPARATOR$BUCK_DIR" exec "$PYTHON" "$BUCK_PY_PATH" "$@"
