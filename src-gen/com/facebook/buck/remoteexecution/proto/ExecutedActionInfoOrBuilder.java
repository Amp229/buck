// @generated
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remoteexecution/proto/metadata.proto

package com.facebook.buck.remoteexecution.proto;

@javax.annotation.Generated(value="protoc", comments="annotations:ExecutedActionInfoOrBuilder.java.pb.meta")
public interface ExecutedActionInfoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:facebook.remote_execution.ExecutedActionInfo)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>int64 cpu_stat_usage_usec = 1;</code>
   */
  long getCpuStatUsageUsec();

  /**
   * <code>int64 cpu_stat_user_usec = 2;</code>
   */
  long getCpuStatUserUsec();

  /**
   * <code>int64 cpu_stat_system_usec = 3;</code>
   */
  long getCpuStatSystemUsec();

  /**
   * <pre>
   * Whether we should fallback to local retry if this action fails with exit code 1.
   * Fallback means we don't trust if this action failed and it may be flaky.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue is_fallback_enabled_for_completed_action = 4;</code>
   */
  boolean hasIsFallbackEnabledForCompletedAction();
  /**
   * <pre>
   * Whether we should fallback to local retry if this action fails with exit code 1.
   * Fallback means we don't trust if this action failed and it may be flaky.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue is_fallback_enabled_for_completed_action = 4;</code>
   */
  com.google.protobuf.BoolValue getIsFallbackEnabledForCompletedAction();
  /**
   * <pre>
   * Whether we should fallback to local retry if this action fails with exit code 1.
   * Fallback means we don't trust if this action failed and it may be flaky.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue is_fallback_enabled_for_completed_action = 4;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getIsFallbackEnabledForCompletedActionOrBuilder();

  /**
   * <code>int64 engine_scheduled_count = 5;</code>
   */
  long getEngineScheduledCount();

  /**
   * <pre>
   * max amount of memory used by task
   * </pre>
   *
   * <code>int64 max_used_mem = 6;</code>
   */
  long getMaxUsedMem();

  /**
   * <pre>
   * max amount of memory available on the host
   * </pre>
   *
   * <code>int64 host_total_mem = 7;</code>
   */
  long getHostTotalMem();

  /**
   * <pre>
   * max amount of memory available for the task
   * </pre>
   *
   * <code>int64 task_total_mem = 8;</code>
   */
  long getTaskTotalMem();

  /**
   * <pre>
   * reflects if the action was ran on elastic capacity
   * </pre>
   *
   * <code>bool executed_on_elastic_capacity = 9;</code>
   */
  boolean getExecutedOnElasticCapacity();

  /**
   * <pre>
   * Reflects if the action was deduplicated (= observed execution time can
   * significantly differ from a real one).
   * </pre>
   *
   * <code>bool deduplicated = 10;</code>
   */
  boolean getDeduplicated();

  /**
   * <pre>
   * digest of bpftrace output (if bpftrace was run)
   * deprecated in favour of server_logs
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest trace_digest = 11;</code>
   */
  boolean hasTraceDigest();
  /**
   * <pre>
   * digest of bpftrace output (if bpftrace was run)
   * deprecated in favour of server_logs
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest trace_digest = 11;</code>
   */
  build.bazel.remote.execution.v2.Digest getTraceDigest();
  /**
   * <pre>
   * digest of bpftrace output (if bpftrace was run)
   * deprecated in favour of server_logs
   * </pre>
   *
   * <code>.build.bazel.remote.execution.v2.Digest trace_digest = 11;</code>
   */
  build.bazel.remote.execution.v2.DigestOrBuilder getTraceDigestOrBuilder();

  /**
   * <pre>
   * reflects if the action was ran on a a worker with an experimental setup
   * </pre>
   *
   * <code>bool executed_on_experimental_setup = 12;</code>
   */
  boolean getExecutedOnExperimentalSetup();

  /**
   * <pre>
   * input space used by the task for materialization
   * </pre>
   *
   * <code>int64 used_input_size = 13;</code>
   */
  long getUsedInputSize();

  /**
   * <pre>
   * action result ttl reflecting the minimal ttl of just executed action result outputs
   * </pre>
   *
   * <code>int64 action_result_ttl = 14;</code>
   */
  long getActionResultTtl();

  /**
   * <code>.facebook.remote_execution.ExecutedActionStorageStats executed_action_storage_stats = 15;</code>
   */
  boolean hasExecutedActionStorageStats();
  /**
   * <code>.facebook.remote_execution.ExecutedActionStorageStats executed_action_storage_stats = 15;</code>
   */
  com.facebook.buck.remoteexecution.proto.ExecutedActionStorageStats getExecutedActionStorageStats();
  /**
   * <code>.facebook.remote_execution.ExecutedActionStorageStats executed_action_storage_stats = 15;</code>
   */
  com.facebook.buck.remoteexecution.proto.ExecutedActionStorageStatsOrBuilder getExecutedActionStorageStatsOrBuilder();

  /**
   * <code>uint64 reserved_memory = 16;</code>
   */
  long getReservedMemory();

  /**
   * <code>uint64 cpu_units = 17;</code>
   */
  long getCpuUnits();
}
