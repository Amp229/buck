# Before merging:
#
#    A
#   / \
#  B   C
#   \ /
#    D
#   / \
#  E   F
#
#
# After merging:
#    1(AB)
#    |\
#    | C
#    |/
#    D
#    |
#    2(EF)
#
# C and F each depend on a static and prebuilt library.
# D shares its dependency on F with a precompiled header.

cxx_library(
    name = "A",
    srcs = ["A.c"],
    can_be_asset = True,
    soname = "lib1a.so",
    visibility = ["PUBLIC"],
    deps = [
        ":B",
        ":C",
    ],
)

cxx_library(
    name = "B",
    srcs = ["B.c"],
    can_be_asset = True,
    soname = "lib1b.so",
    visibility = ["PUBLIC"],
    deps = [
        ":D",
    ],
)

cxx_library(
    name = "C",
    srcs = ["C.c"],
    visibility = ["PUBLIC"],
    deps = [
        ":D",
        ":prebuilt_for_C",
        ":static_for_C",
    ],
)

cxx_library(
    name = "D",
    precompiled_header = ":precompiled_for_D",
    srcs = ["D.c"],
    visibility = ["PUBLIC"],
    deps = [
        ":E",
        ":F", # TODO T123289901: This dependency shouldn't be necessary.
    ],
)

cxx_library(
    name = "E",
    srcs = ["E.c"],
    soname = "lib2e.so",
    visibility = ["PUBLIC"],
    deps = [
    ],
)

cxx_library(
    name = "F",
    srcs = ["F.c"],
    exported_headers = ["F.h"],
    soname = "lib2f.so",
    visibility = ["PUBLIC"],
    deps = [
        ":prebuilt_for_F",
        ":static_for_F",
    ],
)

cxx_library(
    name = "static_for_C",
    srcs = ["static_for_C.c"],
    force_static = True,
    deps = [
    ],
)

cxx_library(
    name = "static_for_F",
    srcs = ["static_for_F.c"],
    force_static = True,
    deps = [
    ],
)

cxx_precompiled_header(
    name = "precompiled_for_D",
    src = "precompiled_for_D.h",
    deps = [
        ":F"
    ],
)

prebuilt_cxx_library(
    name = "prebuilt_for_C",
    platform_shared_lib = [
        ("android-x86", "prebuilt_for_C/android-x86/libprebuilt_for_C.so"),
    ],
    supported_platforms_regex = "android-x86",
)

prebuilt_cxx_library(
    name = "prebuilt_for_F",
    platform_shared_lib = [
        ("android-x86", "prebuilt_for_F/android-x86/libprebuilt_for_F.so"),
    ],
    supported_platforms_regex = "android-x86",
)

# Built manually to create .so file for prebuilt_for_C
cxx_library(
    name = "prebuilt_for_C_src",
    srcs = ["prebuilt_for_C.c"],
    soname = "libprebuilt_for_C.so",
    deps = [
    ],
)

# Built manually to create .so file for prebuilt_for_F
cxx_library(
    name = "prebuilt_for_F_src",
    srcs = ["prebuilt_for_F.c"],
    soname = "libprebuilt_for_F.so",
    deps = [
    ],
)

# This graph validates native_library_merge_sequence behavior preventing
# target dependency cycles in cases where module dependency cycles are
# allowed, namely when dependency chains repeatedly alternate between
# the root module and one non-root module.
#
#    G
#   /|\
#  / | H
#  | |/|
#  | I |
#  | |\|
#  | | J
#  |\|/|
#  | K |
#  | |\|
#  \ | L
#   \|/
#    M
#
# H, J, and L can_be_asset.
# Putting G, I, K, and M in an application_module_config and H, J, and L
# in the application_module_blacklist will split the densely connected
# targets into root and non-root modules, preventing any merging.

cxx_library(
    name = "G",
    srcs = ["G.c"],
    visibility = ["PUBLIC"],
    deps = [
        ":H",
        ":I",
        ":K",
        ":M",
    ],
)

cxx_library(
    name = "H",
    srcs = ["H.c"],
    can_be_asset = True,
    visibility = ["PUBLIC"],
    deps = [
        ":I",
        ":J",
    ],
)

cxx_library(
    name = "I",
    srcs = ["I.c"],
    visibility = ["PUBLIC"],
    deps = [
        ":J",
        ":K",
    ],
)

cxx_library(
    name = "J",
    srcs = ["J.c"],
    can_be_asset = True,
    visibility = ["PUBLIC"],
    deps = [
        ":K",
        ":L",
    ],
)

cxx_library(
    name = "K",
    srcs = ["K.c"],
    visibility = ["PUBLIC"],
    deps = [
        ":L",
        ":M",
    ],
)

cxx_library(
    name = "L",
    srcs = ["L.c"],
    can_be_asset = True,
    visibility = ["PUBLIC"],
    deps = [
        ":M",
    ],
)

cxx_library(
    name = "M",
    srcs = ["M.c"],
    visibility = ["PUBLIC"],
    deps = [
    ],
)

# Any library with used_by_wrap_script=True should not be merged
cxx_library(
    name = "N",
    srcs = ["N.c"],
    can_be_asset = True,
    soname = "libN.so",
    visibility = ["PUBLIC"],
    deps = [
        ":O",
    ],
)

cxx_library(
    name = "O",
    srcs = ["O.c"],
    can_be_asset = True,
    soname = "libO.so",
    visibility = ["PUBLIC"],
    deps = [
        ":P",
    ],
)

cxx_library(
    name = "P",
    srcs = ["P.c"],
    soname = "libP.so",
    used_by_wrap_script = True,
    visibility = ["PUBLIC"],
)

cxx_library(
    name = "glue_1",
    srcs = ["glue_1.c"],
    force_static = True,
    visibility = ["PUBLIC"],
    deps = [
    ],
)

cxx_library(
    name = "glue_2",
    srcs = ["glue_2.c"],
    force_static = True,
    visibility = ["PUBLIC"],
    deps = [
    ],
)

sh_binary(
    name = "codegen",
    main = "codegen.sh",
    visibility = ["PUBLIC"],
)
